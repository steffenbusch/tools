#!/usr/bin/env bash

# A bash script to display the contents of a gzip-compressed file using the `bat` utility.
# The script takes the filename of the compressed file as a command-line argument and 
# passes any additional arguments to `bat`.

# Exit immediately if a command exits with a non-zero status
set -o errexit
set -o pipefail

function usage()
{
  echo "Usage: $0 [bat options] filename.gz"
  echo
  echo "Examples:"
  echo "  $0 example.gz                  # Display the contents of example.gz with default options"
  echo "  $0 -r 10:20 example.gz         # Display lines 10 to 20 of example.gz"
}

# Check if the script was called with at least one argument
if [[ $# -lt 1 ]]; then
  usage
  exit 1
fi

# Parse the command-line arguments
bat_options=()
filename=

while [[ $# -gt 0 ]]; do
  case $1 in
    -*)
      # Collect any additional bat options
      bat_options+=("$1")
      shift
      ;;
    *)
      if [[ -e "$1" ]]; then
        # Set the filename
        filename="$1"
        shift
      else
        # Pass the argument to bat
        bat_options+=("$1")
        shift
      fi
      ;;
  esac
done

# If no filename was found, print the usage information and exit with an error status
if [[ -z "$filename" ]]; then
  usage
  exit 1
fi

# Check if the specified file exists
if [[ ! -e "$filename" ]]; then
  echo "Error: file '$filename' not found"
  exit 1
fi

# If a null byte is found, add the '--show-all' option to bat_options, which will cause bat
# to display all bytes, including non-printable characters, when displaying the contents of the file.
if zcat "$filename" | LANG=C grep --quiet --max-count=1 --binary --text --perl-regexp '\x00'; then
  bat_options+=("--show-all")
fi

# Display the contents of the file using bat
# Pass the bat options and the filename to bat
zcat "$filename" | bat "${bat_options[@]}" --file-name="$filename"
